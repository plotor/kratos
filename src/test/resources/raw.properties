package org.zhenchao.theia.archangel;

import org.zhenchao.theia.archangel.drools.fact.SpamScoreFact;
import org.zhenchao.theia.archangel.commons.enums.AntiSpamType;

global org.slf4j.Logger log;

rule "new province and device"
lock-on-active
when
$ssf : SpamScoreFact(
antiSpamTypes contains AntiSpamType.LOGIN_NEW_PROVINCE,
antiSpamTypes contains AntiSpamType.LOGIN_NEW_DEVICE,
antiSpamTypes not contains AntiSpamType.REAL_XM_DEVICE)
then
double score = 4.0;
log.info("[{}] set env auth score and safety score as {}", drools.getRule().getName(), score);
modify($ssf){
setEnvAuthScore(score),
setSafetyScore(score)
}
retract($ssf)
end


rule "blank device in browser"
lock-on-active
when
$ssf : SpamScoreFact(
antiSpamTypes contains AntiSpamType.BLANK_DEVICE_IN_WEB_BROWSER)
then
double score = 2.0;
log.info("[{}] set env auth score and safety score as {}", drools.getRule().getName(), score);
modify($ssf){
setEnvAuthScore(score),
setSafetyScore(score)
}
retract($ssf)
end

rule "basic env auth and safety score"
lock-on-active
when
$ssf : SpamScoreFact()
then
double envAuthScore = 5.0;
double safetyScore = 6.0;
log.info("[{}] set basic env auth score as {} and safety score as {}", drools.getRule().getName(), envAuthScore, safetyScore);
modify($ssf){
setEnvAuthScore(envAuthScore),
setSafetyScore(safetyScore)
}
end

/* province group */

rule "login new province"
lock-on-active
activation-group "province"
when
$ssf : SpamScoreFact(antiSpamTypes contains AntiSpamType.LOGIN_NEW_PROVINCE)
then
double score = -1.0;
log.info("[{}] add safety score by {}", drools.getRule().getName(), score);
$ssf.addSafetyScore(score);
update($ssf)
end

rule "login common used province"
lock-on-active
activation-group "province"
when
$ssf : SpamScoreFact(antiSpamTypes contains AntiSpamType.LOGIN_COMMON_USED_PROVINCE)
then
double score = 1.0;
log.info("[{}] add safety score by {}", drools.getRule().getName(), score);
$ssf.addSafetyScore(score);
update($ssf)
end

/* device group */

rule "login new device"
lock-on-active
activation-group "device"
when
$ssf : SpamScoreFact(antiSpamTypes contains AntiSpamType.LOGIN_NEW_DEVICE)
then
double safetyScore = -1.0;
double envAuthScore = -1.0;
log.info("[{}] add safety score by {}, add env auth scope by {}", drools.getRule().getName(), safetyScore, envAuthScore);
modify($ssf){
addSafetyScore(safetyScore),
addEnvAuthScore(envAuthScore)
}
end

rule "login register device"
lock-on-active
activation-group "device"
when
$ssf : SpamScoreFact(antiSpamTypes contains AntiSpamType.LOGIN_REGISTER_DEVICE)
then
double safetyScore = 4.0;
double envAuthScore = 4.0;
log.info("[{}] add safety score by {}, add env auth scope by {}", drools.getRule().getName(), safetyScore, envAuthScore);
modify($ssf){
addSafetyScore(safetyScore),
addEnvAuthScore(envAuthScore)
}
end

rule "login common used device"
lock-on-active
activation-group "device"
when
$ssf : SpamScoreFact(antiSpamTypes contains AntiSpamType.LOGIN_COMMON_USED_DEVICE)
then
double safetyScore = 2.0;
double envAuthScore = 2.0;
log.info("[{}] add safety score by {}, add env auth scope by {}", drools.getRule().getName(), safetyScore, envAuthScore);
modify($ssf){
addSafetyScore(safetyScore),
addEnvAuthScore(envAuthScore)
}
end

/* device group */

rule "not or black device"
lock-on-active
activation-group "xm_device"
when
$ssf : SpamScoreFact(antiSpamTypes contains AntiSpamType.NOT_XM_DEVICE || antiSpamTypes contains AntiSpamType.XM_DEVICE_BLACKLIST)
then
double safetyScore = -2.0;
double envAuthScore = -2.0;
log.info("[{}] add safety score by {}, add env auth scope by {}", drools.getRule().getName(), safetyScore, envAuthScore);
modify($ssf){
addSafetyScore(safetyScore),
addEnvAuthScore(envAuthScore)
}
end

rule "real device"
lock-on-active
activation-group "xm_device"
when
$ssf : SpamScoreFact(antiSpamTypes contains AntiSpamType.REAL_XM_DEVICE)
then
double envAuthScore = -2.0;
log.info("[{}] add env auth scope by {}", drools.getRule().getName(), envAuthScore);
$ssf.addEnvAuthScore(envAuthScore);
update($ssf)
end